name: Build

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"

env:
  IS_GITHUB_ACTIONS: 1
  CHANNEL: "${{ inputs.channel }}"
  FLUTTER_VERSION: '3.24.0'
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  TAG_NAME: "${{ inputs.tag-name }}"
  TARGET_NAME_apk: "Hiddify-Android"
  TARGET_NAME_exe: "Hiddify-Windows-x64"
  TARGET_NAME_dmg: "Hiddify-MacOS"
  TARGET_NAME_pkg: "Hiddify-MacOS-Installer"
  TARGET_NAME_ipa: "Hiddify-iOS"
  TARGET_NAME_AppImage: "Hiddify-Linux-x64"
  TARGET_NAME_deb: "Hiddify-Debian-x64"
  TARGET_NAME_rpm: "Hiddify-rpm-x64"

jobs:
  build_linux:
    permissions: write-all
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup dependencies
        run: make linux-install-dependencies

      - name: Prepare for Linux
        run: make linux-prepare

      - name: Build Linux
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: make linux-release

      - name: Copy to out Linux
        run: |
          ls -R dist/
          mkdir out
          mkdir tmp_out
          for EXT in AppImage deb rpm; do
            KEY=TARGET_NAME_${EXT}
            FILENAME=${!KEY}
            echo "For $EXT ($KEY) filename is ${FILENAME}"
            mv dist/*/*.$EXT tmp_out/${FILENAME}.$EXT
            ls tmp_out
            chmod +x tmp_out/${FILENAME}.$EXT
            cp ./.github/help/linux/* tmp_out/
            mv tmp_out/${FILENAME}.$EXT out/
          done

      - name: Upload Linux Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: ./out
          retention-days: 1

  build_apk:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.13.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          
      - name: Prepare for Android
        run: |
          make android-prepare
          tree
          
      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
          dart run slang

      - name: Build APK
        run: |
          flutter build apk --release

      - name: Upload APK Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 1

  build_windows:
    permissions: write-all
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
          dart run slang
        
      - name: Prepare for Windows (Download libcore)
        shell: bash
        run: |
          # Read core version
          CORE_VERSION=$(grep "core.version" dependencies.properties | cut -d'=' -f2)
          echo "Core version: $CORE_VERSION"
          
          # Setup directories
          DESKTOP_OUT="libcore/bin"
          mkdir -p $DESKTOP_OUT
          
          # Download and extract libcore
          CORE_URL="https://github.com/hiddify/hiddify-next-core/releases/download/v${CORE_VERSION}"
          CORE_NAME="hiddify-core"
          echo "Downloading from: $CORE_URL/${CORE_NAME}-windows-amd64.tar.gz"
          curl -L "$CORE_URL/${CORE_NAME}-windows-amd64.tar.gz" | tar xz -C "$DESKTOP_OUT/"
          
          # List files to verify
          ls -la $DESKTOP_OUT/

      - name: Build Windows
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        shell: bash
        run: |
          # Install flutter_distributor
          dart pub global activate flutter_distributor
          
          # Build with flutter_distributor
          export PATH="$PATH:$HOME/.pub-cache/bin"
          flutter_distributor package --flutter-build-args=verbose --platform windows --targets exe,msix --skip-clean --build-dart-define sentry_dsn=$SENTRY_DSN
  
      - name: Copy to out Windows
        shell: bash
        run: |
          # Create directories
          mkdir -p dist/tmp out
          
          # Copy setup files
          find dist -name "*windows-setup.exe" -type f -exec cp {} out/Hiddify-Windows-Setup-x64.exe \; 2>/dev/null || true
          find dist -name "*windows.msix" -type f -exec cp {} out/Hiddify-Windows-Setup-x64.msix \; 2>/dev/null || true
          
          # Create portable package
          cp -r build/windows/x64/runner/Release dist/tmp/hiddify-next
          cp .github/help/mac-windows/*.url dist/tmp/hiddify-next/ 2>/dev/null || true
          
          # Zip portable version (using PowerShell for zip as it's available on Windows)
          powershell -Command "Compress-Archive -Force -Path dist/tmp/hiddify-next -DestinationPath out/Hiddify-Windows-Portable-x64.zip"
          
          # List output files
          ls -la out/
          
      - name: Upload Windows Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ./out
          retention-days: 1

  build_macos:
    permissions: write-all
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup dependencies
        run: |
          make macos-install-dependencies

      - name: Prepare for macOS
        run: |
          make macos-prepare
          tree

      - name: Build macOS
        run: |
          make macos-release

      - name: Copy to out macOS
        run: |
          mkdir out
          mv dist/*/*.dmg out/${TARGET_NAME_dmg}.dmg
          mv dist/*/*.pkg out/${TARGET_NAME_pkg}.pkg

      - name: Upload macOS Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: ./out
          retention-days: 1

  build_ios:
    permissions: write-all
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
  
      - name: Clean Flutter Build
        run: |
          flutter clean
  
      - name: Get Flutter Packages
        run: |
          flutter pub get
  
      - name: Reinstall iOS Dependencies
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install
          
      - name: Install tree
        run: brew install tree

      - name: Prepare for iOS
        run: |
          make ios-prepare
          tree
  
      - name: Build iOS (No Code Sign)
        run: |
          flutter build ipa --no-codesign
  
      - name: Copy to out iOS
        run: |
          mkdir out
          mv build/ios/ipa/*.ipa out/${TARGET_NAME_ipa}.ipa
  
      - name: Upload iOS Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: iOS
          path: ./out
          retention-days: 1